Frontend ⇄ Backend Integration Plan (Phase after 2C.3)

Target
- Frontend: React (Vite) at http://localhost:3000
- Backend: Django REST Framework + JWT at http://localhost:8000

1) Backend readiness (already done or verify)
- CORS: allow http://localhost:3000 in notes_backend/settings.py (CORS_ALLOWED_ORIGINS)
- Auth endpoints:
  - POST /api/auth/register/
  - POST /api/auth/login/
  - POST /api/auth/refresh/
  - GET  /api/auth/verify/
  - POST /api/auth/logout/
- Notes endpoints:
  - GET/POST /api/notes/
  - GET/PUT/DELETE /api/notes/{id}/
  - Query: ?search=, ?tags__name=, ?ordering=title|updated_at|created_at
- Tags endpoints:
  - GET/POST /api/tags/
  - GET/PUT/DELETE /api/tags/{id}/

2) Frontend configuration
- Create env file: frontend/.env
  - VITE_API_BASE_URL=http://localhost:8000
- Ensure dev server runs on port 3000 only
  - package.json: "dev": "vite --port 3000"

3) API client setup (frontend)
- Create src/services/apiClient.js
  - Use axios with baseURL = import.meta.env.VITE_API_BASE_URL + "/api"
  - Request interceptor: attach Authorization: Bearer <accessToken> when present
  - Response interceptor: on 401 with refresh token present → call /auth/refresh/ → retry original
  - Expose helpers:
    - auth.register(payload)
    - auth.login({username|email, password})
    - auth.verify()
    - auth.logout(refresh)
    - notes.list(params)
    - notes.get(id)
    - notes.create(payload)
    - notes.update(id, payload)
    - notes.remove(id)
    - tags.list(), tags.create(), tags.update(), tags.remove()

4) Auth integration (replace mockAuth in AuthContext)
- State: { user, accessToken, refreshToken, isLoading, error }
- Storage: persist tokens in localStorage (accessToken, refreshToken)
- login(form): POST /auth/login → set tokens, call /auth/verify → set user
- register(form): POST /auth/register → auto-login or redirect to login
- verify on app init: if access token exists → /auth/verify
- logout(): POST /auth/logout { refresh }, clear tokens/state

5) Notes integration (replace mockApi in NotesContext)
- loadNotes(): GET /notes?search=&tags__name=&ordering=
- createNote(note): POST /notes { title, content, tag_ids: [] }
- updateNote(id, note): PUT /notes/{id}
- deleteNote(id): DELETE /notes/{id}
- Ensure mapping between UI tags and API tag_ids
- If tag management UI exists, wire to /tags endpoints; otherwise derive tags from existing notes

6) UI adjustments
- Remove dev-only mock banners and any mock data generators
- Keep defensive UI (loading/error states) while integrating
- Ensure search input maps to ?search= and tag filter maps to ?tags__name=
- Sort controls map to ?ordering=title|updated_at|created_at (prepend '-' for desc)

Status:
- Search input → `?search=` [wired]
- Tag filter → `?tags__name=` [wired]
- Sort controls → `?ordering=` with '-' for desc [wired]
- Loading/Error states retained [wired]

7) Error handling & refresh
- On 401 from resource endpoints:
  - If refreshToken exists, call /auth/refresh → update accessToken → retry once
  - If refresh fails, force logout() and redirect to /login

Status:
- Implemented in `src/services/apiClient.js` response interceptor [wired]

8) Testing checklist
- Auth
  - Register → Login → Verify → Logout
  - Refresh flow works after access token expiry (shorten ACCESS_TOKEN_LIFETIME in dev if needed)
- Notes
  - List, Create, Update, Delete for the signed-in user
  - Search, Tag filter, Ordering
- Tags
  - Create, Update color, Delete; tag_ids reflected on notes
- CORS
  - No CORS errors in browser console

Runbook:
- Backend: `cd backend; .\\venv\\Scripts\\activate; python manage.py runserver`
- Frontend: `cd frontend; npm run dev` (port 3000)
- Set `VITE_API_BASE_URL=http://localhost:8000` in `frontend/.env`

9) Rollout steps
- Backend: runserver on 8000; verify /api/auth/verify with admin token
- Frontend: set VITE_API_BASE_URL; switch providers to real API client
- Run frontend dev server on 3000; sign in and validate end-to-end

Status:
- Backend CORS allows 3000 [done]
- Providers switched to real API [done]
- Verify end-to-end as per checklist

10) Fallback/feature flags (optional)
- Add toggle USE_MOCK=false in .env to quickly switch between mockApi and real API during development

Note: Current build uses real API by default. If needed, we can introduce `VITE_USE_MOCK=true` and an API gateway to switch between `mockApi` and `apiClient` without touching contexts.

Notes
- Keep console logging minimal in production
- Use toast notifications for user-visible errors

